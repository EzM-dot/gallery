pipeline {
    agent any
    
    tools {
        nodejs 'nodejs'  // This should match the Node.js installation in Jenkins
    }

    environment {
        NODE_ENV = 'production'
        RENDER_URL = 'https://gallery-app-4vz1.onrender.com'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                git branch: 'master', url: 'https://github.com/EzM-dot/gallery.git'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies...'
                sh 'npm install'
            }
        }
        
        stage('Test') {
            steps {
                echo 'Running tests...'
                sh 'npm test'
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building application...'
                sh 'npm run build'
            }
        }
        
        stage('Deploy') {
            when {
                branch 'master'
            }
            steps {
                echo 'Deploying application...'
                // The actual deployment will be handled by Render's webhook
                // This step is a placeholder for any additional deployment steps
                echo 'Deployment triggered via Render webhook'
                
                // Optional: Add a step to verify the deployment
                script {
                    def response = httpRequest url: "${env.RENDER_URL}/health"
                    if (response.status == 200) {
                        echo 'Deployment verified successfully!'
                    } else {
                        error "Deployment verification failed: ${response.status}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Build process completed.'
            // Clean up after build
            cleanWs()
        }
        success {
            echo 'Build succeeded!'
            // Send Slack notification on success
            slackSend (
                channel: '#edwin_ip1',
                color: 'good',
                message: """*Deployment Successful*
*Project:* ${env.JOB_NAME}
*Build ID:* ${env.BUILD_ID}
*Build Number:* ${env.BUILD_NUMBER}
*Status:* ${currentBuild.currentResult}
*Build URL:* ${env.BUILD_URL}
*Live Site:* ${env.RENDER_URL}"""
            )
        }
        failure {
            echo 'Build failed!'
            // Send email notification on failure
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>
                <p>Failed stage: ${currentBuild.currentResult}</p>
                <p>Check console output at <a href='${env.BUILD_URL}console'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>
                <p>Change: ${CHANGES, showPaths=true, format="%a: %r %p \\n"}</p>
                """,
                to: 'musyokaedwin@gmail.com',
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                mimeType: 'text/html'
            )
            // Send Slack notification on failure
            slackSend (
                channel: '#edwin_ip1',
                color: 'danger',
                message: """*Deployment Failed*
*Project:* ${env.JOB_NAME}
*Build ID:* ${env.BUILD_ID}
*Build Number:* ${env.BUILD_NUMBER}
*Status:* ${currentBuild.currentResult}
*Build URL:* ${env.BUILD_URL}
*Live Site:* ${env.RENDER_URL}
*Check the logs for more details*"""
            )
        }
    }
}
